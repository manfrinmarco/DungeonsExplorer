@startuml ComponentDiagram

title Dungeon Explorer - Component Diagram 

package "Core" {
  [Game] --> [GameContext]
  [Game] --> [DefaultGameInitializer]
  [Game] --> [CommandProcessor]
  [GameContext] --> [Player]
  [GameContext] --> [Room]
  [GameContext] --> [EventManager]
  [CommandProcessor] --> [GameContext]
  [CommandProcessor] --> [GameFileManager]
  [CommandProcessor] --> [InputSanitizer]
  [CommandProcessor] --> [EventManager]
  [CommandProcessor] --> [GameStateMemento]
}

package "Map" {
  [Room] --> [Enemy]
  [Room] --> [Item]
  [CompositeRoom] --> [Room]
  [MapLoader] --> [Room]
  [MapLoader] --> [EnemyFactory]
  [MapLoader] --> [ItemFactory]
  [MapLoader] --> [ReflectionLoader]
}

package "Entities" {
  [Enemy] --> [EnemyStrategy] <<interface>>
  [EnemyFactory] --> [EnemyTemplate] <<interface>>
  [EnemyTemplate] --> [AggressiveStrategy]
  [EnemyTemplate] --> [DefensiveStrategy]
  [Player] --> [Inventory]
}

package "Items" {
  [ItemFactory] --> [ItemTemplate] <<interface>>
  [ItemFactory] --> [ReflectionLoader]
  [CompositeItem] --> [Item]
  [ItemBuilder] --> [Item]
  [Inventory] --> [Item]
}

package "Events" {
  [EventManager] --> [EventListener] <<interface>>
  [EventManager] --> [GameEvent]
  [ScoreListener] ..> [GameEvent]
  [DropListener] ..> [GameEvent]
}

package "IO" {
  [GameFileManager] --> [GameStateMemento]
  [GameFileManager] --> [GameException]
  [ReflectionLoader] --> [@AutoLoad] <<stereotype>>
}

package "Config & Logging" {
  [GameLogger] --> [GameConfig]
  [GameConfig] --> [game.properties]
}

package "Security" {
  [GameException]
}

note right of [ReflectionLoader]
  Usa reflection per istanziare classi
  annotate con <<@AutoLoad>>.
end note

note right of [GameContext]
  Singleton che conserva lo stato del gioco:
  player, stanza corrente, punteggio, eventi.
end note

note right of [CommandProcessor]
  Gestisce l'input del giocatore,
  esegue i comandi e coordina
  interazioni tra componenti.
end note

@enduml